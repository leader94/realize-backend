D:\Downloads\Softwares\dynamo\dynamodb_local_latest>java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb
dynamodb-admin

D:\Downloads\Softwares> .\minio.exe server C:\minio --console-address :9090
# API Response
{
    status: 'success'|'error'
    res?: {},
    err: {}
}

#upload image
/base/


#video/gif upload
/overlay/


# user 
/user   - POST 
/user/{userid}   - GET  
{
    "id": "12466434534",
    "name": "Rohit Sharma",
    "firstName": "Rohit",
    "lastName": "Sharma",
    "mobile": "9876543212",
    "countryCode": "91",
    "profilePhoto": "https://xsgames.co/randomusers/assets/avatars/male/73.jpg",
    "projects": [
        {
            id:"",
            title:"",
            image:"",
            scenes:[
                {
                    id:"",
                    base:[{
                            baseId: baseId,
                            originalName: base.fileName,
                            originalExtn: base.extn,
                            localPath: base.localPath,
                    },
                    {}], // currenly only 0
                    overlay:[{
                                baseId: overlayId,
                                originalName: overlay.fileName,
                                originalExtn: overlay.extn,
                                fileName: overlayId,
                                localPath: overlay.localPath,
                    }],
                    overlayImage:[],
                    baseImage:[]
                }
            ]
        }
    ]

}


//first time BE will send id of project 

Database
===============
LOGIN TABLE
pk              sk              uuid
mob             meta            userId


User TABLE
pk              sk              uuid
userid          meta              name: 'User',      firstName: 'User',      lastName: '',      countryCode:91     mobile:       profilePhoto: 
userid          pr-projectID      ... including scenes data 






FLOWS
/login 
skip auth --> rather use local strategy

validatelogin ---> find user else creates new user 
getUser       
returns user   

---- ACTUAL ROUTE STarts here
Login =-->  @Request() req   -- req.user 
            craetes JWT token from user.id and returns jwt token and user object